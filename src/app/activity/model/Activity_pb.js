/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Activity', null, global);
goog.exportSymbol('proto.Activity.EventType', null, global);
goog.exportSymbol('proto.Activity.FitEvent', null, global);
goog.exportSymbol('proto.Activity.FitManufacturer', null, global);
goog.exportSymbol('proto.Activity.Meta', null, global);
goog.exportSymbol('proto.Activity.Sport', null, global);
goog.exportSymbol('proto.Activity.SubSport', null, global);
goog.exportSymbol('proto.Activity.Summary', null, global);
goog.exportSymbol('proto.Activity.UserData', null, global);
goog.exportSymbol('proto.Activity.Values', null, global);
goog.exportSymbol('proto.Activity.Weather', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Activity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Activity.repeatedFields_, null);
};
goog.inherits(proto.Activity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Activity.displayName = 'proto.Activity';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Activity.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Activity.prototype.toObject = function(opt_includeInstance) {
  return proto.Activity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Activity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.Activity.Meta.toObject(includeInstance, f),
    userdata: (f = msg.getUserdata()) && proto.Activity.UserData.toObject(includeInstance, f),
    summary: (f = msg.getSummary()) && proto.Activity.Summary.toObject(includeInstance, f),
    values: (f = msg.getValues()) && proto.Activity.Values.toObject(includeInstance, f),
    eventsList: jspb.Message.toObjectList(msg.getEventsList(),
    proto.Activity.FitEvent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Activity}
 */
proto.Activity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Activity;
  return proto.Activity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Activity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Activity}
 */
proto.Activity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Activity.Meta;
      reader.readMessage(value,proto.Activity.Meta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new proto.Activity.UserData;
      reader.readMessage(value,proto.Activity.UserData.deserializeBinaryFromReader);
      msg.setUserdata(value);
      break;
    case 3:
      var value = new proto.Activity.Summary;
      reader.readMessage(value,proto.Activity.Summary.deserializeBinaryFromReader);
      msg.setSummary(value);
      break;
    case 4:
      var value = new proto.Activity.Values;
      reader.readMessage(value,proto.Activity.Values.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    case 5:
      var value = new proto.Activity.FitEvent;
      reader.readMessage(value,proto.Activity.FitEvent.deserializeBinaryFromReader);
      msg.addEvents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Activity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Activity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Activity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Activity.Meta.serializeBinaryToWriter
    );
  }
  f = message.getUserdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Activity.UserData.serializeBinaryToWriter
    );
  }
  f = message.getSummary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Activity.Summary.serializeBinaryToWriter
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Activity.Values.serializeBinaryToWriter
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Activity.FitEvent.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Activity.FitManufacturer = {
  UNKNOWN: 0,
  GARMIN: 1,
  GARMIN_FR405_ANTFS: 2,
  ZEPHYR: 3,
  DAYTON: 4,
  IDT: 5,
  SRM: 6,
  QUARQ: 7,
  IBIKE: 8,
  SARIS: 9,
  SPARK_HK: 10,
  TANITA: 11,
  ECHOWELL: 12,
  DYNASTREAM_OEM: 13,
  NAUTILUS: 14,
  DYNASTREAM: 15,
  TIMEX: 16,
  METRIGEAR: 17,
  XELIC: 18,
  BEURER: 19,
  CARDIOSPORT: 20,
  A_AND_D: 21,
  HMM: 22,
  SUUNTO: 23,
  THITA_ELEKTRONIK: 24,
  GPULSE: 25,
  CLEAN_MOBILE: 26,
  PEDAL_BRAIN: 27,
  PEAKSWARE: 28,
  SAXONAR: 29,
  LEMOND_FITNESS: 30,
  DEXCOM: 31,
  WAHOO_FITNESS: 32,
  OCTANE_FITNESS: 33,
  ARCHINOETICS: 34,
  THE_HURT_BOX: 35,
  CITIZEN_SYSTEMS: 36,
  MAGELLAN: 37,
  OSYNCE: 38,
  HOLUX: 39,
  CONCEPT2: 40,
  ONE_GIANT_LEAP: 42,
  ACE_SENSOR: 43,
  BRIM_BROTHERS: 44,
  XPLOVA: 45,
  PERCEPTION_DIGITAL: 46,
  BF1SYSTEMS: 47,
  PIONEER: 48,
  SPANTEC: 49,
  METALOGICS: 50,
  I4IIIIS: 51,
  SEIKO_EPSON: 52,
  SEIKO_EPSON_OEM: 53,
  IFOR_POWELL: 54,
  MAXWELL_GUIDER: 55,
  STAR_TRAC: 56,
  BREAKAWAY: 57,
  ALATECH_TECHNOLOGY_LTD: 58,
  MIO_TECHNOLOGY_EUROPE: 59,
  ROTOR: 60,
  GEONAUTE: 61,
  ID_BIKE: 62,
  SPECIALIZED: 63,
  WTEK: 64,
  PHYSICAL_ENTERPRISES: 65,
  NORTH_POLE_ENGINEERING: 66,
  BKOOL: 67,
  CATEYE: 68,
  STAGES_CYCLING: 69,
  SIGMASPORT: 70,
  TOMTOM: 71,
  PERIPEDAL: 72,
  WATTBIKE: 73,
  MOXY: 76,
  CICLOSPORT: 77,
  POWERBAHN: 78,
  ACORN_PROJECTS_APS: 79,
  LIFEBEAM: 80,
  BONTRAGER: 81,
  WELLGO: 82,
  SCOSCHE: 83,
  MAGURA: 84,
  WOODWAY: 85,
  ELITE: 86,
  NIELSEN_KELLERMAN: 87,
  DK_CITY: 88,
  TACX: 89,
  DIRECTION_TECHNOLOGY: 90,
  MAGTONIC: 91,
  ONEPARTCARBON: 92,
  INSIDE_RIDE_TECHNOLOGIES: 93,
  SOUND_OF_MOTION: 94,
  STRYD: 95,
  ICG: 96,
  MIPULSE: 97,
  BSX_ATHLETICS: 98,
  LOOK: 99,
  CAMPAGNOLO_SRL: 100,
  BODY_BIKE_SMART: 101,
  PRAXISWORKS: 102,
  LIMITS_TECHNOLOGY: 103,
  TOPACTION_TECHNOLOGY: 104,
  COSINUSS: 105,
  FITCARE: 106,
  MAGENE: 107,
  GIANT_MANUFACTURING_CO: 108,
  TIGRASPORT: 109,
  DEVELOPMENT: 255,
  HEALTHANDLIFE: 257,
  LEZYNE: 258,
  SCRIBE_LABS: 259,
  ZWIFT: 260,
  WATTEAM: 261,
  RECON: 262,
  FAVERO_ELECTRONICS: 263,
  DYNOVELO: 264,
  STRAVA: 265,
  PRECOR: 266,
  BRYTON: 267,
  SRAM: 268,
  NAVMAN: 269,
  COBI: 270,
  SPIVI: 271,
  MIO_MAGELLAN: 272,
  EVESPORTS: 273,
  SENSITIVUS_GAUGE: 274,
  PODOON: 275
};

/**
 * @enum {number}
 */
proto.Activity.EventType = {
  START: 0,
  STOP: 1,
  CONSECUTIVE_DEPRECIATED: 2,
  MARKER: 3,
  STOP_ALL: 4,
  BEGIN_DEPRECIATED: 5,
  END_DEPRECIATED: 6,
  END_ALL_DEPRECIATED: 7,
  STOP_DISABLE: 8,
  STOP_DISABLE_ALL: 9,
  NULL: 10
};

/**
 * @enum {number}
 */
proto.Activity.Sport = {
  GENERIC: 0,
  RUNNING: 1,
  CYCLING: 2,
  TRANSITION: 3,
  FITNESS_EQUIPMENT: 4,
  SWIMMING: 5,
  BASKETBALL: 6,
  SOCCER: 7,
  TENNIS: 8,
  AMERICAN_FOOTBALL: 9,
  TRAINING: 10,
  WALKING: 11,
  CROSS_COUNTRY_SKIING: 12,
  ALPINE_SKIING: 13,
  SNOWBOARDING: 14,
  ROWING: 15,
  MOUNTAINEERING: 16,
  HIKING: 17,
  MULTISPORT: 18,
  PADDLING: 19,
  ALL: 254,
  INVALID: 255
};

/**
 * @enum {number}
 */
proto.Activity.SubSport = {
  GENERIC_SUBSPORT: 0,
  TREADMILL: 1,
  STREET: 2,
  TRAIL: 3,
  TRACK: 4,
  SPIN: 5,
  INDOOR_CYCLING: 6,
  ROAD: 7,
  MOUNTAIN: 8,
  DOWNHILL: 9,
  RECUMBENT: 10,
  CYCLOCROSS: 11,
  HAND_CYCLING: 12,
  TRACK_CYCLING: 13,
  INDOOR_ROWING: 14,
  ELLIPTICAL: 15,
  STAIR_CLIMBING: 16,
  LAP_SWIMMING: 17,
  OPEN_WATER: 18,
  FLEXIBILITY_TRAINING: 19,
  STRENGTH_TRAINING: 20,
  WARM_UP: 21,
  MATCH: 22,
  EXERCISE: 23,
  CHALLENGE: 24,
  INDOOR_SKIING: 25,
  CARDIO_TRAINING: 26,
  INDOOR_WALKING: 27,
  ALL_SUBSPORT: 254,
  INVALID_SUBSPORT: 255
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Activity.Meta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Activity.Meta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Activity.Meta.displayName = 'proto.Activity.Meta';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Activity.Meta.prototype.toObject = function(opt_includeInstance) {
  return proto.Activity.Meta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Activity.Meta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Meta.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdts: jspb.Message.getFieldWithDefault(msg, 1, ""),
    manufacturer: jspb.Message.getFieldWithDefault(msg, 2, 0),
    product: jspb.Message.getFieldWithDefault(msg, 3, 0),
    version: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    source: jspb.Message.getFieldWithDefault(msg, 5, ""),
    uploadts: jspb.Message.getFieldWithDefault(msg, 6, ""),
    sport: jspb.Message.getFieldWithDefault(msg, 7, 0),
    subsport: jspb.Message.getFieldWithDefault(msg, 8, 0),
    location: jspb.Message.getFieldWithDefault(msg, 9, ""),
    weather: (f = msg.getWeather()) && proto.Activity.Weather.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Activity.Meta}
 */
proto.Activity.Meta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Activity.Meta;
  return proto.Activity.Meta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Activity.Meta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Activity.Meta}
 */
proto.Activity.Meta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedts(value);
      break;
    case 2:
      var value = /** @type {!proto.Activity.FitManufacturer} */ (reader.readEnum());
      msg.setManufacturer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProduct(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUploadts(value);
      break;
    case 7:
      var value = /** @type {!proto.Activity.Sport} */ (reader.readEnum());
      msg.setSport(value);
      break;
    case 8:
      var value = /** @type {!proto.Activity.SubSport} */ (reader.readEnum());
      msg.setSubsport(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 10:
      var value = new proto.Activity.Weather;
      reader.readMessage(value,proto.Activity.Weather.deserializeBinaryFromReader);
      msg.setWeather(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Activity.Meta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Activity.Meta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Activity.Meta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Meta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedts();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getManufacturer();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getProduct();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUploadts();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSport();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getSubsport();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getWeather();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Activity.Weather.serializeBinaryToWriter
    );
  }
};


/**
 * optional string createdTs = 1;
 * @return {string}
 */
proto.Activity.Meta.prototype.getCreatedts = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Activity.Meta.prototype.setCreatedts = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FitManufacturer manufacturer = 2;
 * @return {!proto.Activity.FitManufacturer}
 */
proto.Activity.Meta.prototype.getManufacturer = function() {
  return /** @type {!proto.Activity.FitManufacturer} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Activity.FitManufacturer} value */
proto.Activity.Meta.prototype.setManufacturer = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 product = 3;
 * @return {number}
 */
proto.Activity.Meta.prototype.getProduct = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Activity.Meta.prototype.setProduct = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double version = 4;
 * @return {number}
 */
proto.Activity.Meta.prototype.getVersion = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Activity.Meta.prototype.setVersion = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string source = 5;
 * @return {string}
 */
proto.Activity.Meta.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Activity.Meta.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string uploadTs = 6;
 * @return {string}
 */
proto.Activity.Meta.prototype.getUploadts = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Activity.Meta.prototype.setUploadts = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional Sport sport = 7;
 * @return {!proto.Activity.Sport}
 */
proto.Activity.Meta.prototype.getSport = function() {
  return /** @type {!proto.Activity.Sport} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {!proto.Activity.Sport} value */
proto.Activity.Meta.prototype.setSport = function(value) {
  jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional SubSport subSport = 8;
 * @return {!proto.Activity.SubSport}
 */
proto.Activity.Meta.prototype.getSubsport = function() {
  return /** @type {!proto.Activity.SubSport} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.Activity.SubSport} value */
proto.Activity.Meta.prototype.setSubsport = function(value) {
  jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string location = 9;
 * @return {string}
 */
proto.Activity.Meta.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Activity.Meta.prototype.setLocation = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional Weather weather = 10;
 * @return {?proto.Activity.Weather}
 */
proto.Activity.Meta.prototype.getWeather = function() {
  return /** @type{?proto.Activity.Weather} */ (
    jspb.Message.getWrapperField(this, proto.Activity.Weather, 10));
};


/** @param {?proto.Activity.Weather|undefined} value */
proto.Activity.Meta.prototype.setWeather = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.Activity.Meta.prototype.clearWeather = function() {
  this.setWeather(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Activity.Meta.prototype.hasWeather = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Activity.UserData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Activity.UserData.repeatedFields_, null);
};
goog.inherits(proto.Activity.UserData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Activity.UserData.displayName = 'proto.Activity.UserData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Activity.UserData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Activity.UserData.prototype.toObject = function(opt_includeInstance) {
  return proto.Activity.UserData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Activity.UserData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.UserData.toObject = function(includeInstance, msg) {
  var f, obj = {
    feeling: jspb.Message.getFieldWithDefault(msg, 1, 0),
    notes: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tagsList: jspb.Message.getRepeatedField(msg, 3),
    userweather: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Activity.UserData}
 */
proto.Activity.UserData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Activity.UserData;
  return proto.Activity.UserData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Activity.UserData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Activity.UserData}
 */
proto.Activity.UserData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFeeling(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserweather(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Activity.UserData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Activity.UserData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Activity.UserData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.UserData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeeling();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNotes();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getUserweather();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional int32 feeling = 1;
 * @return {number}
 */
proto.Activity.UserData.prototype.getFeeling = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Activity.UserData.prototype.setFeeling = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string notes = 2;
 * @return {string}
 */
proto.Activity.UserData.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Activity.UserData.prototype.setNotes = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string tags = 3;
 * @return {!Array.<string>}
 */
proto.Activity.UserData.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.Activity.UserData.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Activity.UserData.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Activity.UserData.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional string userWeather = 4;
 * @return {string}
 */
proto.Activity.UserData.prototype.getUserweather = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Activity.UserData.prototype.setUserweather = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Activity.Weather = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Activity.Weather, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Activity.Weather.displayName = 'proto.Activity.Weather';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Activity.Weather.prototype.toObject = function(opt_includeInstance) {
  return proto.Activity.Weather.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Activity.Weather} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Weather.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Activity.Weather}
 */
proto.Activity.Weather.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Activity.Weather;
  return proto.Activity.Weather.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Activity.Weather} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Activity.Weather}
 */
proto.Activity.Weather.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Activity.Weather.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Activity.Weather.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Activity.Weather} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Weather.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Activity.Summary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Activity.Summary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Activity.Summary.displayName = 'proto.Activity.Summary';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Activity.Summary.prototype.toObject = function(opt_includeInstance) {
  return proto.Activity.Summary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Activity.Summary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Summary.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasattributemapMap: (f = msg.getHasattributemapMap()) ? f.toObject(includeInstance, undefined) : [],
    startts: jspb.Message.getFieldWithDefault(msg, 2, ""),
    endts: jspb.Message.getFieldWithDefault(msg, 3, ""),
    totalelapsed: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    totaltimer: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    totalmoving: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    totalstopped: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    totalpaused: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    totalascent: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    totaldescent: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    totaldistance: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    totalcalories: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    avghr: jspb.Message.getFieldWithDefault(msg, 13, 0),
    maxhr: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minhr: jspb.Message.getFieldWithDefault(msg, 15, 0),
    avgcadence: jspb.Message.getFieldWithDefault(msg, 16, 0),
    maxcadence: jspb.Message.getFieldWithDefault(msg, 17, 0),
    mincadence: jspb.Message.getFieldWithDefault(msg, 18, 0),
    avgtemp: jspb.Message.getFieldWithDefault(msg, 19, 0),
    maxtemp: jspb.Message.getFieldWithDefault(msg, 20, 0),
    mintemp: jspb.Message.getFieldWithDefault(msg, 21, 0),
    avgspeed: +jspb.Message.getFieldWithDefault(msg, 22, 0.0),
    maxspeed: +jspb.Message.getFieldWithDefault(msg, 23, 0.0),
    mingradient: jspb.Message.getFieldWithDefault(msg, 24, 0),
    maxgradient: jspb.Message.getFieldWithDefault(msg, 25, 0),
    avggradient: jspb.Message.getFieldWithDefault(msg, 26, 0),
    nlaps: jspb.Message.getFieldWithDefault(msg, 27, 0),
    hrvsMap: (f = msg.getHrvsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Activity.Summary}
 */
proto.Activity.Summary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Activity.Summary;
  return proto.Activity.Summary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Activity.Summary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Activity.Summary}
 */
proto.Activity.Summary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getHasattributemapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBool);
         });
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartts(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndts(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalelapsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotaltimer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalmoving(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalstopped(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalpaused(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalascent(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotaldescent(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotaldistance(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalcalories(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvghr(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxhr(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinhr(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvgcadence(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxcadence(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMincadence(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvgtemp(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxtemp(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMintemp(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvgspeed(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxspeed(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMingradient(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxgradient(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAvggradient(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNlaps(value);
      break;
    case 28:
      var value = msg.getHrvsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readDouble);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Activity.Summary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Activity.Summary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Activity.Summary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Summary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasattributemapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBool);
  }
  f = message.getStartts();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEndts();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTotalelapsed();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getTotaltimer();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getTotalmoving();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getTotalstopped();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getTotalpaused();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getTotalascent();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTotaldescent();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getTotaldistance();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getTotalcalories();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getAvghr();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getMaxhr();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getMinhr();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getAvgcadence();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMaxcadence();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getMincadence();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getAvgtemp();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getMaxtemp();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getMintemp();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getAvgspeed();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getMaxspeed();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = message.getMingradient();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getMaxgradient();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
  f = message.getAvggradient();
  if (f !== 0) {
    writer.writeInt32(
      26,
      f
    );
  }
  f = message.getNlaps();
  if (f !== 0) {
    writer.writeInt32(
      27,
      f
    );
  }
  f = message.getHrvsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(28, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeDouble);
  }
};


/**
 * map<string, bool> hasAttributeMap = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,boolean>}
 */
proto.Activity.Summary.prototype.getHasattributemapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,boolean>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.Activity.Summary.prototype.clearHasattributemapMap = function() {
  this.getHasattributemapMap().clear();
};


/**
 * optional string startTs = 2;
 * @return {string}
 */
proto.Activity.Summary.prototype.getStartts = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Activity.Summary.prototype.setStartts = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string endTs = 3;
 * @return {string}
 */
proto.Activity.Summary.prototype.getEndts = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Activity.Summary.prototype.setEndts = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double totalElapsed = 4;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotalelapsed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotalelapsed = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double totalTimer = 5;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotaltimer = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotaltimer = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double totalMoving = 6;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotalmoving = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotalmoving = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double totalStopped = 7;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotalstopped = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotalstopped = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double totalPaused = 8;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotalpaused = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotalpaused = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double totalAscent = 9;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotalascent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotalascent = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double totalDescent = 10;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotaldescent = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotaldescent = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double totalDistance = 11;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotaldistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotaldistance = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double totalCalories = 12;
 * @return {number}
 */
proto.Activity.Summary.prototype.getTotalcalories = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setTotalcalories = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional int32 avgHr = 13;
 * @return {number}
 */
proto.Activity.Summary.prototype.getAvghr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setAvghr = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 maxHr = 14;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMaxhr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMaxhr = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 minHr = 15;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMinhr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMinhr = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 avgCadence = 16;
 * @return {number}
 */
proto.Activity.Summary.prototype.getAvgcadence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setAvgcadence = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 maxCadence = 17;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMaxcadence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMaxcadence = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int32 minCadence = 18;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMincadence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMincadence = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 avgTemp = 19;
 * @return {number}
 */
proto.Activity.Summary.prototype.getAvgtemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setAvgtemp = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 maxTemp = 20;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMaxtemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMaxtemp = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 minTemp = 21;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMintemp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMintemp = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional double avgSpeed = 22;
 * @return {number}
 */
proto.Activity.Summary.prototype.getAvgspeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 22, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setAvgspeed = function(value) {
  jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double maxSpeed = 23;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMaxspeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 23, 0.0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMaxspeed = function(value) {
  jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional int32 minGradient = 24;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMingradient = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMingradient = function(value) {
  jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 maxGradient = 25;
 * @return {number}
 */
proto.Activity.Summary.prototype.getMaxgradient = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setMaxgradient = function(value) {
  jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional int32 avgGradient = 26;
 * @return {number}
 */
proto.Activity.Summary.prototype.getAvggradient = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setAvggradient = function(value) {
  jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional int32 nLaps = 27;
 * @return {number}
 */
proto.Activity.Summary.prototype.getNlaps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/** @param {number} value */
proto.Activity.Summary.prototype.setNlaps = function(value) {
  jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * map<string, double> hrvs = 28;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.Activity.Summary.prototype.getHrvsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 28, opt_noLazyCreate,
      null));
};


proto.Activity.Summary.prototype.clearHrvsMap = function() {
  this.getHrvsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Activity.Values = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Activity.Values.repeatedFields_, null);
};
goog.inherits(proto.Activity.Values, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Activity.Values.displayName = 'proto.Activity.Values';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Activity.Values.repeatedFields_ = [1,2,3,4,5,6,7,8,9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Activity.Values.prototype.toObject = function(opt_includeInstance) {
  return proto.Activity.Values.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Activity.Values} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Values.toObject = function(includeInstance, msg) {
  var f, obj = {
    tsList: jspb.Message.getRepeatedField(msg, 1),
    hrList: jspb.Message.getRepeatedField(msg, 2),
    latList: jspb.Message.getRepeatedFloatingPointField(msg, 3),
    lonList: jspb.Message.getRepeatedFloatingPointField(msg, 4),
    speedList: jspb.Message.getRepeatedFloatingPointField(msg, 5),
    altitudeList: jspb.Message.getRepeatedFloatingPointField(msg, 6),
    gradeList: jspb.Message.getRepeatedFloatingPointField(msg, 7),
    distanceList: jspb.Message.getRepeatedFloatingPointField(msg, 8),
    temperatureList: jspb.Message.getRepeatedFloatingPointField(msg, 9),
    movingList: jspb.Message.getRepeatedField(msg, 10),
    cadenceList: jspb.Message.getRepeatedField(msg, 11),
    hrvsMap: (f = msg.getHrvsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Activity.Values}
 */
proto.Activity.Values.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Activity.Values;
  return proto.Activity.Values.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Activity.Values} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Activity.Values}
 */
proto.Activity.Values.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTs(value);
      break;
    case 2:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setHrList(value);
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setLatList(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setLonList(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setSpeedList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setAltitudeList(value);
      break;
    case 7:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setGradeList(value);
      break;
    case 8:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDistanceList(value);
      break;
    case 9:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setTemperatureList(value);
      break;
    case 10:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setMovingList(value);
      break;
    case 11:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt32());
      msg.setCadenceList(value);
      break;
    case 12:
      var value = msg.getHrvsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readDouble);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Activity.Values.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Activity.Values.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Activity.Values} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.Values.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getHrList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
  f = message.getLatList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
  f = message.getLonList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
  f = message.getSpeedList();
  if (f.length > 0) {
    writer.writePackedDouble(
      5,
      f
    );
  }
  f = message.getAltitudeList();
  if (f.length > 0) {
    writer.writePackedDouble(
      6,
      f
    );
  }
  f = message.getGradeList();
  if (f.length > 0) {
    writer.writePackedDouble(
      7,
      f
    );
  }
  f = message.getDistanceList();
  if (f.length > 0) {
    writer.writePackedDouble(
      8,
      f
    );
  }
  f = message.getTemperatureList();
  if (f.length > 0) {
    writer.writePackedDouble(
      9,
      f
    );
  }
  f = message.getMovingList();
  if (f.length > 0) {
    writer.writePackedBool(
      10,
      f
    );
  }
  f = message.getCadenceList();
  if (f.length > 0) {
    writer.writePackedInt32(
      11,
      f
    );
  }
  f = message.getHrvsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeDouble);
  }
};


/**
 * repeated string ts = 1;
 * @return {!Array.<string>}
 */
proto.Activity.Values.prototype.getTsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.Activity.Values.prototype.setTsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addTs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Activity.Values.prototype.clearTsList = function() {
  this.setTsList([]);
};


/**
 * repeated int32 hr = 2;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getHrList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setHrList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addHr = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.Activity.Values.prototype.clearHrList = function() {
  this.setHrList([]);
};


/**
 * repeated double lat = 3;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getLatList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setLatList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addLat = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Activity.Values.prototype.clearLatList = function() {
  this.setLatList([]);
};


/**
 * repeated double lon = 4;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getLonList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setLonList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addLon = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.Activity.Values.prototype.clearLonList = function() {
  this.setLonList([]);
};


/**
 * repeated double speed = 5;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getSpeedList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setSpeedList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addSpeed = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.Activity.Values.prototype.clearSpeedList = function() {
  this.setSpeedList([]);
};


/**
 * repeated double altitude = 6;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getAltitudeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setAltitudeList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addAltitude = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.Activity.Values.prototype.clearAltitudeList = function() {
  this.setAltitudeList([]);
};


/**
 * repeated double grade = 7;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getGradeList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setGradeList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addGrade = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.Activity.Values.prototype.clearGradeList = function() {
  this.setGradeList([]);
};


/**
 * repeated double distance = 8;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getDistanceList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 8));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setDistanceList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addDistance = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.Activity.Values.prototype.clearDistanceList = function() {
  this.setDistanceList([]);
};


/**
 * repeated double temperature = 9;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getTemperatureList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 9));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setTemperatureList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addTemperature = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.Activity.Values.prototype.clearTemperatureList = function() {
  this.setTemperatureList([]);
};


/**
 * repeated bool moving = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array.<boolean>}
 */
proto.Activity.Values.prototype.getMovingList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getRepeatedField(this, 10));
};


/** @param {!Array.<boolean>} value */
proto.Activity.Values.prototype.setMovingList = function(value) {
  jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addMoving = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


proto.Activity.Values.prototype.clearMovingList = function() {
  this.setMovingList([]);
};


/**
 * repeated int32 cadence = 11;
 * @return {!Array.<number>}
 */
proto.Activity.Values.prototype.getCadenceList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array.<number>} value */
proto.Activity.Values.prototype.setCadenceList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Activity.Values.prototype.addCadence = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.Activity.Values.prototype.clearCadenceList = function() {
  this.setCadenceList([]);
};


/**
 * map<string, double> hrvs = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.Activity.Values.prototype.getHrvsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      null));
};


proto.Activity.Values.prototype.clearHrvsMap = function() {
  this.getHrvsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Activity.FitEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Activity.FitEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Activity.FitEvent.displayName = 'proto.Activity.FitEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Activity.FitEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.Activity.FitEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Activity.FitEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.FitEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    startidx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endidx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ts: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startts: jspb.Message.getFieldWithDefault(msg, 4, ""),
    event: jspb.Message.getFieldWithDefault(msg, 5, ""),
    eventtype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    timertime: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    elapsedtime: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    movingtime: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    trigger: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Activity.FitEvent}
 */
proto.Activity.FitEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Activity.FitEvent;
  return proto.Activity.FitEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Activity.FitEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Activity.FitEvent}
 */
proto.Activity.FitEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartidx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndidx(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartts(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvent(value);
      break;
    case 6:
      var value = /** @type {!proto.Activity.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimertime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setElapsedtime(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMovingtime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrigger(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Activity.FitEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Activity.FitEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Activity.FitEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Activity.FitEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartidx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEndidx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartts();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEvent();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTimertime();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getElapsedtime();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getMovingtime();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTrigger();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int32 startIdx = 1;
 * @return {number}
 */
proto.Activity.FitEvent.prototype.getStartidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Activity.FitEvent.prototype.setStartidx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 endIdx = 2;
 * @return {number}
 */
proto.Activity.FitEvent.prototype.getEndidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Activity.FitEvent.prototype.setEndidx = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ts = 3;
 * @return {string}
 */
proto.Activity.FitEvent.prototype.getTs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Activity.FitEvent.prototype.setTs = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string startTs = 4;
 * @return {string}
 */
proto.Activity.FitEvent.prototype.getStartts = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Activity.FitEvent.prototype.setStartts = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string event = 5;
 * @return {string}
 */
proto.Activity.FitEvent.prototype.getEvent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Activity.FitEvent.prototype.setEvent = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional EventType eventType = 6;
 * @return {!proto.Activity.EventType}
 */
proto.Activity.FitEvent.prototype.getEventtype = function() {
  return /** @type {!proto.Activity.EventType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.Activity.EventType} value */
proto.Activity.FitEvent.prototype.setEventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional double timerTime = 7;
 * @return {number}
 */
proto.Activity.FitEvent.prototype.getTimertime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.Activity.FitEvent.prototype.setTimertime = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double elapsedTime = 8;
 * @return {number}
 */
proto.Activity.FitEvent.prototype.getElapsedtime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.Activity.FitEvent.prototype.setElapsedtime = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double movingTime = 9;
 * @return {number}
 */
proto.Activity.FitEvent.prototype.getMovingtime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.Activity.FitEvent.prototype.setMovingtime = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string trigger = 10;
 * @return {string}
 */
proto.Activity.FitEvent.prototype.getTrigger = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Activity.FitEvent.prototype.setTrigger = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional Meta meta = 1;
 * @return {?proto.Activity.Meta}
 */
proto.Activity.prototype.getMeta = function() {
  return /** @type{?proto.Activity.Meta} */ (
    jspb.Message.getWrapperField(this, proto.Activity.Meta, 1));
};


/** @param {?proto.Activity.Meta|undefined} value */
proto.Activity.prototype.setMeta = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Activity.prototype.clearMeta = function() {
  this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Activity.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserData userData = 2;
 * @return {?proto.Activity.UserData}
 */
proto.Activity.prototype.getUserdata = function() {
  return /** @type{?proto.Activity.UserData} */ (
    jspb.Message.getWrapperField(this, proto.Activity.UserData, 2));
};


/** @param {?proto.Activity.UserData|undefined} value */
proto.Activity.prototype.setUserdata = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Activity.prototype.clearUserdata = function() {
  this.setUserdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Activity.prototype.hasUserdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Summary summary = 3;
 * @return {?proto.Activity.Summary}
 */
proto.Activity.prototype.getSummary = function() {
  return /** @type{?proto.Activity.Summary} */ (
    jspb.Message.getWrapperField(this, proto.Activity.Summary, 3));
};


/** @param {?proto.Activity.Summary|undefined} value */
proto.Activity.prototype.setSummary = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Activity.prototype.clearSummary = function() {
  this.setSummary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Activity.prototype.hasSummary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Values values = 4;
 * @return {?proto.Activity.Values}
 */
proto.Activity.prototype.getValues = function() {
  return /** @type{?proto.Activity.Values} */ (
    jspb.Message.getWrapperField(this, proto.Activity.Values, 4));
};


/** @param {?proto.Activity.Values|undefined} value */
proto.Activity.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Activity.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Activity.prototype.hasValues = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated FitEvent events = 5;
 * @return {!Array.<!proto.Activity.FitEvent>}
 */
proto.Activity.prototype.getEventsList = function() {
  return /** @type{!Array.<!proto.Activity.FitEvent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Activity.FitEvent, 5));
};


/** @param {!Array.<!proto.Activity.FitEvent>} value */
proto.Activity.prototype.setEventsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Activity.FitEvent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Activity.FitEvent}
 */
proto.Activity.prototype.addEvents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Activity.FitEvent, opt_index);
};


proto.Activity.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


goog.object.extend(exports, proto);
