# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
parameters:
  node-browser-version:
    type: string
    default: "12.16.1"
jobs:

  build:
    environment:
      nodever: << pipeline.parameters.node-browser-version >>
    docker:
      - image: circleci/node:${nodever}-browsers

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: "Update Node.js and npm"
          command: |
            curl -sSL "https://nodejs.org/dist/v${nodever}/node-v${nodever}-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v12.16.1-linux-x64/bin/node
            curl https://www.npmjs.com/install.sh | sudo bash
      - run:
          name: Check current version of node
          command: node -v
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      # install dependencies
      - run: sudo npm install -g npm
      - run: npm install
      # cache node_modules
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      # run tests!
      - run:
          name: unit tests
          command: node --max_old_space_size=5120 ./node_modules/@angular/cli/bin/ng test  --max-workers=1
      # upload coverage
      - run:
          name: generate and upload coverage
          command: npm run sendcoverage

  build-staging:
      environment:
        nodever: << pipeline.parameters.node-browser-version >>
      docker:
        # specify the version you desire here
        - image: circleci/node:${nodever}-browsers

      working_directory: ~/repo

      steps:
        - checkout

        # Download and cache dependencies
        - restore_cache:
            keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

        # install dependencies
        - run: sudo npm install -g npm
        #- run: sudo npm install angular-cli@latest -g
        - run: npm install
        # cache node_modules
        - save_cache:
            paths:
              - node_modules
            key: v1-dependencies-{{ checksum "package.json" }}


        # build production
        # yarn ng build --prod --configuration=production
        - run:
            name: build staging
            command: |
              mkdir -p ~/repo/workspace/deploy
              mkdir -p ~/repo/workspace/dist
              node ./node_modules/@angular/cli/bin/ng build --configuration=staging --prod --build-optimizer --aot --optimization
              ls -lh ~/repo
              cp -r ~/repo/dist/* ~/repo/workspace/dist
              cp  ~/repo/.circleci/deploy.sh ~/repo/workspace/deploy/
        - persist_to_workspace:
            root: workspace
            paths:
              - ./
        - store_artifacts:
            path: ~/repo/workspace/dist/
            destination: app-distribution

  build-ci:
    environment:
      nodever: << pipeline.parameters.node-browser-version >>
    docker:
      # specify the version you desire here
      - image: circleci/node:${nodever}-browsers

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # install dependencies
      - run: sudo npm install -g npm
      #- run: sudo npm install angular-cli@latest -g
      - run: npm install
      # cache node_modules
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}


      # build production
      # yarn ng build --prod --configuration=production
      - run:
          name: build ci
          command: |
            mkdir -p ~/repo/workspace/deploy
            mkdir -p ~/repo/workspace/dist
            node ./node_modules/@angular/cli/bin/ng build --configuration=ci --prod --build-optimizer --aot --optimization
            ls -lh ~/repo
            cp -r ~/repo/dist/* ~/repo/workspace/dist
            cp  ~/repo/.circleci/deploy.sh ~/repo/workspace/deploy/
      - persist_to_workspace:
          root: workspace
          paths:
            - ./
      - store_artifacts:
          path: ~/repo/workspace/dist/
          destination: app-ci-distribution

  build-prod:
      environment:
        nodever: << pipeline.parameters.node-browser-version >>
      docker:
        # specify the version you desire here
        - image: circleci/node:${nodever}-browsers

      working_directory: ~/repo

      steps:
        - checkout

        # Download and cache dependencies
        - restore_cache:
            keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

        # install dependencies
        - run: sudo npm install -g npm
        #- run: sudo npm install angular-cli@latest -g
        - run: npm install
        # cache node_modules
        - save_cache:
            paths:
              - node_modules
            key: v1-dependencies-{{ checksum "package.json" }}


        # build production
        - run:
            name: build production
            command: |
              mkdir -p ~/repo/workspace/deploy
              mkdir -p ~/repo/workspace/dist
              node ./node_modules/@angular/cli/bin/ng build --prod --configuration=production --build-optimizer --aot --optimization
              ls -lh ~/repo
              cp -r ~/repo/dist/* ~/repo/workspace/dist
              cp  ~/repo/.circleci/deploy.sh ~/repo/workspace/deploy/
        - persist_to_workspace:
            root: workspace
            paths:
              - ./
        - store_artifacts:
            path: ~/repo/workspace/dist/
            destination: app-distribution



  deploy-ci:
    docker:
      - image: circleci/python:3.6-jessie

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo/workspace
      # install dependencies
      - run:
          context: ci
          name: install AWS
          command: |
            sudo apt-get install jq
            sudo pip install awscli
            aws --version
            echo access key: $AWS_ACCESS_KEY_ID
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region ca-central-1
            aws configure set default.output json
      # deploy staging
      - run: ls -lh
      - run:
          context: ci
          name: deploy build (ci)
          command: |
            ls -lh ~/repo/
            ls -lh ~/repo/workspace/
            chmod 744 ~/repo/workspace/deploy/deploy.sh
            ~/repo/workspace/deploy/deploy.sh ci
  deploy-staging:
    docker:
      - image: circleci/python:3.6-jessie

    working_directory: ~/repo

    steps:
      - attach_workspace:
          at: ~/repo/workspace
      # install dependencies
      - run:
         context: staging
         name: install AWS
         command: |
           sudo apt-get install jq
           sudo pip install awscli
           aws --version
           echo access key: $AWS_ACCESS_KEY_ID
           aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
           aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
           aws configure set region ca-central-1
           aws configure set default.output json
      # deploy staging
      - run: ls -lh
      - run:
         context: staging
         name: deploy build (staging)
         command: |
           ls -lh ~/repo/
           ls -lh ~/repo/workspace/
           chmod 744 ~/repo/workspace/deploy/deploy.sh
           ~/repo/workspace/deploy/deploy.sh staging

  deploy-prod:
      docker:
        - image: circleci/python:3.6-jessie

      working_directory: ~/repo
      steps:
            - attach_workspace:
                at: ~/repo/workspace
            # install dependencies
            - run:
               context: prod
               name: install AWS
               command: |
                 sudo apt-get install jq
                 sudo pip install awscli
                 aws --version
                 aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                 aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                 aws configure set region ca-central-1
                 aws configure set default.output json
            # deploy production
            - run:
               context: prod
               name: deploy build (production)
               command: |
                 ls -lh ~/repo/
                 ls -lh ~/repo/workspace/
                 chmod 744 ~/repo/workspace/deploy/deploy.sh
                 ~/repo/workspace/deploy/deploy.sh prod

workflows:
  version: 2
  build-test-deploy:
    jobs:
      - build
      - build-prod:
          requires:
            - build
          filters:
            branches:
              only:
                - master
          context: staging
      - build-ci:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
          context: ci
      - deploy-ci:
          requires:
            - build
            - build-ci
          filters:
            branches:
              only: develop
          context: ci
      - build-staging:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
          context: staging
      - deploy-staging:
          requires:
            - build
            - build-staging
          filters:
            branches:
              only: develop
          context: staging
      - hold:
          type: approval
          requires:
            - build-prod
          filters:
            branches:
              only: master
          context: prod
      - deploy-prod:
          requires:
            - build
            - build-prod
          filters:
            branches:
              only: master
          context: prod



